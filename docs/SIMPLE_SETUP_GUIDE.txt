üè† DOMY V ITALII - SIMPLE SETUP GUIDE
=====================================

This guide will help you get your Italian real estate website online with a working admin panel.
Don't worry - I'll explain everything step by step!

üìã WHAT YOU HAVE RIGHT NOW
==========================
‚úÖ Complete backend system (the "brain" of your website)
‚úÖ Database structure (where all your data is stored)
‚úÖ Admin panel foundation (half-built interface for managing content)
‚úÖ Your existing website (the public-facing pages)

üéØ WHAT YOU NEED TO DO
======================
1. Get hosting accounts (where your website will live on the internet)
2. Deploy your backend (put the "brain" online)
3. Connect your domain name (so people can find your website)
4. Finish building the admin panel (so you can manage properties and blog posts)

üí∞ COSTS YOU'LL NEED TO BUDGET
==============================
- Railway (backend hosting): $20/month
- Netlify (website hosting): Free to start, $19/month for advanced features
- Cloudinary (image storage): Free to start (25GB included)
- Domain name: ~$15/year (if you don't have domyvitalii.cz already)

TOTAL: About $20-40/month + domain fee

üìÖ TIME NEEDED
==============
- Setting up hosting: 1-2 hours
- Deploying backend: 30 minutes
- Connecting domain: 30 minutes
- Building admin panel: 4-6 weeks (or hire someone)

üöÄ STEP-BY-STEP INSTRUCTIONS
============================

STEP 1: CREATE ACCOUNTS (Do this first)
---------------------------------------
1.1. Go to railway.app
     - Click "Sign up"
     - Use your email to create account
     - This will host your backend system

1.2. Go to netlify.com  
     - Click "Sign up"
     - Use your email to create account
     - This will host your website

1.3. Go to cloudinary.com
     - Click "Sign up for free"
     - Use your email to create account
     - This will store your property images
     - After signing up, write down these 3 things:
       * Cloud Name
       * API Key  
       * API Secret
     (You'll find these in your Cloudinary dashboard)

STEP 2: PREPARE YOUR COMPUTER
-----------------------------
2.1. Install Node.js
     - Go to nodejs.org
     - Download the "LTS" version (the green button)
     - Run the installer
     - Accept all default settings

2.2. Install Railway CLI
     - Open Command Prompt (Windows) or Terminal (Mac)
     - Type: npm install -g @railway/cli
     - Press Enter and wait for it to finish

STEP 3: DEPLOY YOUR BACKEND
---------------------------
3.1. Open Command Prompt/Terminal
     - Navigate to your backend folder
     - Type: cd backend
     - Press Enter

3.2. Login to Railway
     - Type: railway login
     - Press Enter
     - Your browser will open - click "Authorize"

3.3. Create Railway project
     - Type: railway init
     - Press Enter
     - Choose "Create new project"
     - Give it a name like "domy-v-italii-backend"

3.4. Add database
     - Type: railway add postgresql
     - Press Enter
     - This creates your database automatically

3.5. Set up environment variables (IMPORTANT!)
     Copy and paste these commands one by one:
     
     railway variables set NODE_ENV=production
     railway variables set JWT_SECRET=your-super-secret-key-make-this-long-and-random
     railway variables set REFRESH_TOKEN_SECRET=another-super-secret-key-different-from-above
     railway variables set ADMIN_EMAIL=admin@domyvitalii.cz
     railway variables set ADMIN_PASSWORD=YourSecurePassword123!
     railway variables set CLOUDINARY_CLOUD_NAME=your-cloudinary-cloud-name
     railway variables set CLOUDINARY_API_KEY=your-cloudinary-api-key
     railway variables set CLOUDINARY_API_SECRET=your-cloudinary-api-secret
     
     REPLACE THE FOLLOWING:
     - Replace "your-cloudinary-cloud-name" with your actual Cloudinary cloud name
     - Replace "your-cloudinary-api-key" with your actual Cloudinary API key
     - Replace "your-cloudinary-api-secret" with your actual Cloudinary API secret
     - Change "YourSecurePassword123!" to a strong password you'll remember

3.6. Deploy your backend
     - Type: railway up
     - Press Enter
     - Wait for deployment to finish (this may take 5-10 minutes)

3.7. Set up your database
     - Type: railway run npm run db:push
     - Press Enter
     - Wait for it to finish
     
     - Type: railway run npm run db:seed
     - Press Enter
     - This creates your admin account and sample data

3.8. Get your backend URL
     - Go to railway.app in your browser
     - Click on your project
     - Click "Settings" then "Domains"
     - You'll see a URL like "something.railway.app"
     - Write this down - you'll need it later!

STEP 4: SET UP YOUR DOMAIN (if you have one)
--------------------------------------------
4.1. Add custom domain in Railway
     - In Railway, go to Settings > Domains
     - Click "Add Domain"
     - Enter: api.domyvitalii.cz
     - Follow the instructions to update your DNS

4.2. Update your domain's DNS records
     - Go to your domain provider (where you bought domyvitalii.cz)
     - Add these DNS records:
       * Type: CNAME, Name: api, Value: [your-railway-domain]
       * Type: CNAME, Name: admin, Value: [will get this from Netlify later]

STEP 5: TEST YOUR BACKEND
------------------------
5.1. Test if it's working
     - Open your browser
     - Go to: https://your-railway-url.railway.app/api/health
     - You should see: {"status": "OK", "message": "Server is running"}
     - If you see this, your backend is working! üéâ

STEP 6: WHAT TO DO NEXT
======================

OPTION A: BUILD ADMIN PANEL YOURSELF (4-6 weeks)
-------------------------------------------------
If you want to learn and build it yourself:
- You'll need to learn React (JavaScript framework)
- Follow online tutorials for React + TypeScript
- Use the code structure I've already set up
- This will take 4-6 weeks of learning and building

OPTION B: HIRE A DEVELOPER (Recommended)
----------------------------------------
Much faster and easier:
- Post a job on Upwork, Fiverr, or local job boards
- Budget: $500-1500 for a React developer
- Show them the admin-dashboard folder I created
- They'll need 1-2 weeks to complete it
- Look for developers with "React" and "TypeScript" experience

OPTION C: USE A SIMPLE ADMIN TOOL (Quick solution)
--------------------------------------------------
For immediate use:
- Use Postman (free app) to manage your data
- Download Postman from postman.com
- Import your API endpoints
- You can add/edit properties and blog posts manually
- Not pretty, but functional until you get a proper admin panel

STEP 7: CONNECT YOUR EXISTING WEBSITE
=====================================
To make your existing website use the new backend:

7.1. Update your contact forms
     - Find your contact form code
     - Change the form action to: https://your-backend-url/api/inquiries
     - Make sure it sends: name, email, message, type

7.2. Update property search
     - Change property data source to: https://your-backend-url/api/properties
     - This will show properties from your database

STEP 8: DEPLOY YOUR MAIN WEBSITE
================================
8.1. Upload to Netlify
     - Go to netlify.com
     - Drag and drop your website folder
     - Or connect your GitHub repository
     - Set custom domain to: domyvitalii.cz

üÜò TROUBLESHOOTING
==================

Problem: "Command not found" errors
Solution: Make sure Node.js is installed correctly

Problem: Railway deployment fails
Solution: Check that all environment variables are set correctly

Problem: Can't access backend URL
Solution: Wait 10-15 minutes after deployment, then try again

Problem: Forgot admin password
Solution: Run: railway run npm run db:seed (this resets to default password)

Problem: Images won't upload
Solution: Double-check your Cloudinary credentials are correct

üìû GETTING HELP
===============
If you get stuck:
1. Check the error message carefully
2. Google the exact error message
3. Ask on Stack Overflow or Reddit r/webdev
4. Consider hiring a developer for the technical parts

üéØ PRIORITY ORDER
================
Do these in order of importance:

1. HIGH PRIORITY (Do first):
   - Set up Railway account
   - Deploy backend
   - Test that backend works
   - Get basic admin access working

2. MEDIUM PRIORITY (Do next):
   - Set up domain name
   - Connect existing website forms
   - Plan admin panel development

3. LOW PRIORITY (Do later):
   - Build/hire for admin panel
   - Add advanced features
   - Optimize for search engines

üéâ SUCCESS CHECKLIST
====================
You'll know you're successful when:
‚ñ° Your backend URL works in browser
‚ñ° You can login with admin credentials
‚ñ° Your contact forms save to database
‚ñ° Your domain points to the right places
‚ñ° You can add/edit properties (via admin panel or Postman)

üí° FINAL TIPS
=============
- Don't rush - take breaks if you get frustrated
- Save all your passwords and URLs in a safe place
- Make backups of your work
- Test everything on a phone too
- Ask for help when you need it - most developers are friendly!

Remember: The hard part (building the backend) is already done! 
You're just connecting the pieces now. üè†üáÆüáπ

Good luck! You've got this! üí™ 

cd admin-dashboard
npm install
npm run dev 