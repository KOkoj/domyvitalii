// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String @default("EMPLOYEE")
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties Property[]
  blogPosts  BlogPost[]
  sessions   UserSession[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Property Management
model Property {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  description String
  price       Int // in EUR cents
  currency    String         @default("EUR")
  type        String
  status      String @default("AVAILABLE")
  bedrooms    Int?
  bathrooms   Int?
  area        Float? // in square meters
  lotSize     Float? // in square meters
  yearBuilt   Int?
  features    String? // JSON string of features
  
  // Location
  address     String
  city        String
  region      String
  postalCode  String?
  country     String         @default("Italy")
  latitude    Float?
  longitude   Float?
  
  // SEO & Meta
  metaTitle       String?
  metaDescription String?
  
  // Publishing
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  images     PropertyImage[]
  author     User            @relation(fields: [authorId], references: [id])
  authorId   String
  inquiries  Inquiry[]

  @@map("properties")
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  publicId   String // Cloudinary public ID
  alt        String?
  caption    String?
  isPrimary  Boolean  @default(false)
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  @@map("property_images")
}



// Blog Management
model BlogPost {
  id          String           @id @default(cuid())
  title       String
  slug        String           @unique
  excerpt     String
  content     String // Rich text content
  coverImage  String?
  coverImagePublicId String?
  
  // Blog Categories
  family      String
  topic       String
  tags        String? // JSON string of tags
  
  // SEO & Meta
  metaTitle       String?
  metaDescription String?
  
  // Publishing
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  readTime    Int? // in minutes
  views       Int       @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@map("blog_posts")
}



// Lead Management
model Inquiry {
  id        String      @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  type      String @default("PROPERTY")
  status    String @default("NEW")
  source    String? // Where the inquiry came from
  
  // Property relation (optional)
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("inquiries")
}



// Newsletter Management
model NewsletterSubscriber {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  isActive    Boolean  @default(true)
  source      String? // Where they subscribed from
  preferences String? // JSON string of topics they're interested in
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("newsletter_subscribers")
}

// Settings & Configuration
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("STRING")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

 